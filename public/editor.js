/* ./src/routes/(editor)/editor/+page.svelte generated by Svelte v2.16.1 */
var page = (function(Svelte, jQuery) { "use strict";
	var onMount = Svelte.onMount;
	var onDestroy = Svelte.onDestroy;
	Svelte = (Svelte && Svelte.__esModule) ? Svelte["default"] : Svelte;
	jQuery = (jQuery && jQuery.__esModule) ? jQuery["default"] : jQuery;

	


// export let name = "Nothing";

// export const prerender = true;

/**
 * @type JSON
 */
let componentCollection;
/**
 * @type JSON
 */
let editorPreferences;

/**
 * @type JSON
 */
let componentCollectionInside;
$: componentCollection,  (()=>{
    componentCollectionInside = componentCollection;
})();

/**
 * @type JSON
 */
let editorPreferencesInside;
$: editorPreferences,  (()=>{
    editorPreferencesInside = editorPreferences;
})();



onMount(() => {


    jQuery("#editorInnerPanel > *")
        .on("mouseover", (e) => {
            var target = e.target;
            jQuery(target).addClass("hovered");
            // setSelectedElement(jQuery(target).attr("class"));
            window.parent.postMessage(jQuery(target).attr("class"), '*');

        }).on("mouseout", (e) => {
            var target = e.target;
            jQuery(target).removeClass("hovered");
        });



     // Listen for messages from the outer page
    window.addEventListener('message', event => {
        // console.log("origin check");
        // Check that the message is from a trusted source
        if (event.origin !== window.location.origin) {
            return;
        }
        // console.log("after origin check");
        // console.log(event.data);
        // Get the data from the message
        const data = event.data.message;

        if(data === undefined){
            console.log("Incoming data do not have message!");
        }else{
            // console.log("after message");
            // console.log(data);

            componentCollection = data.componentCollection;
            editorPreferences = data.editorPreferences;
        }


        // Do something with the data
        // console.log("data received"); // Output: "Hello from the outer page!"
    });





        // add eventlistener for @ here to listen from parent !

        // globalComponentCollectionStore.subscribe(data => {
        //     window.parent.postMessage(data, '*');
        // });

        // globalEditorPreferencesStore.subscribe(data => {
        //     window.parent.postMessage(data, '*');
        // });

        // globalEditorViewStore.subscribe(data => {
        //     window.parent.postMessage(data, '*');
        // });


  

});

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-7rk27i-style';
		style.textContent = "#editorInnerPanel.svelte-7rk27i{width:100%;height:100vh}.hovered.svelte-7rk27i{border:2px solid aqua}";
		append(document.head, style);
	}

	function create_main_fragment(component, ctx) {
		var input, text0, div4, div0, text2, div3, div1, pre0, text3_value = ctx.JSON.stringify(ctx.componentCollectionInside, null, 2), text3, text4, div2, pre1, text5_value = ctx.JSON.stringify(ctx.editorPreferencesInside, null, 2), text5;

		return {
			c() {
				input = createElement("input");
				text0 = createText("\n\n");
				div4 = createElement("div");
				div0 = createElement("div");
				div0.textContent = "Editor Page says Helloo";
				text2 = createText("\n\n    ");
				div3 = createElement("div");
				div1 = createElement("div");
				pre0 = createElement("pre");
				text3 = createText(text3_value);
				text4 = createText("\n        ");
				div2 = createElement("div");
				pre1 = createElement("pre");
				text5 = createText(text5_value);
				setAttribute(input, "type", "hidden");
				input.className = "hovered svelte-7rk27i";
				div0.className = "w-full text-3xl md:text-sky-300";
				div1.className = "flex-1";
				div2.className = "flex-1";
				div3.className = "w-full flex flex-wrap";
				div4.id = "editorInnerPanel";
				div4.className = "svelte-7rk27i";
			},

			m(target, anchor) {
				insert(target, input, anchor);
				insert(target, text0, anchor);
				insert(target, div4, anchor);
				append(div4, div0);
				append(div4, text2);
				append(div4, div3);
				append(div3, div1);
				append(div1, pre0);
				append(pre0, text3);
				append(div3, text4);
				append(div3, div2);
				append(div2, pre1);
				append(pre1, text5);
			},

			p(changed, ctx) {
				if ((changed.JSON || changed.componentCollectionInside) && text3_value !== (text3_value = ctx.JSON.stringify(ctx.componentCollectionInside, null, 2))) {
					setData(text3, text3_value);
				}

				if ((changed.JSON || changed.editorPreferencesInside) && text5_value !== (text5_value = ctx.JSON.stringify(ctx.editorPreferencesInside, null, 2))) {
					setData(text5, text5_value);
				}
			},

			d(detach) {
				if (detach) {
					detachNode(input);
					detachNode(text0);
					detachNode(div4);
				}
			}
		};
	}

	function page(options) {
		init(this, options);
		this._state = assign({ JSON : JSON }, options.data);
		this._intro = true;

		if (!document.getElementById("svelte-7rk27i-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(page.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	on: on,
	 	set: set,
	 	_set: _set,
	 	_stage: _stage,
	 	_mount: _mount,
	 	_differs: _differs
	 });

	page.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function setAttribute(node, attribute, value) {
		if (value == null) node.removeAttribute(attribute);
		else node.setAttribute(attribute, value);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function setData(text, data) {
		text.data = '' + data;
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function get() {
		return this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function noop() {}

	function blankObject() {
		return Object.create(null);
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}
	return page;
}(Svelte, jQuery));