/* ./src/routes/+layout.svelte generated by Svelte v2.16.1 */
import { onMount, onDestroy, SvelteComponent } from "svelte";
import "../app.css";
import {
        globalComponentCollectionStore,
        globalEditorPreferencesStore,
        globalRightPanelContentStore,
        globalLeftPanelContentStore,
        globalVisibilityStore,
        globalEditorViewStore
    } from "./globalstores.js";
import { PanelDisplayStyles, MenuLocations } from "./globalconstants.js";
import Menu from "./menu.svelte";
import Info from "./info.svelte";
import Customize from "./menu_customize_page.svelte";
import Widgets from "./menu_widgets_page.svelte";
import Options from "./menu_options_page.svelte";
import { loadVariables } from "./loadvariables.svelte";
import { editorDefaultPreferences, editorBlankData } from "./defaults.js";





/// Attach all data from database to this app.
//TODO: fetch data from WP with rest Api
globalComponentCollectionStore.set(editorBlankData);
globalEditorPreferencesStore.set(editorDefaultPreferences);


/// Load all variables dynamically, especially visibility options
loadVariables();


///Load all panels in layout

/**
 * Variable which holds "Right Panel Contents".
 *
 * @type [{}]
 */
let rightPanelContentStore = [{}];
/// Updates "globalRightPanelContentStore" whenever variable "rightPanelContentStore" changes.
$: globalRightPanelContentStore.set(rightPanelContentStore);

/**
 * Variable which holds "Left Panel Contents".
 *
 * @type [{}]
 */
let leftPanelContentStore = [{}];
/// Updates "globalLeftPanelContentStore" whenever variable "leftPanelContentStore" changes.
$: globalLeftPanelContentStore.set(leftPanelContentStore);


/// Manually add all components to panels.

/// There must be no empty entries in the list. So started adding components like this. To add new panels use .push() !
/// "name" and "ds" (short for display style) parameters are used in background to help development and debugging
rightPanelContentStore = [{"component":Customize, "name":"Customize", "ds": "customizePanelDisplayStyle" }];
leftPanelContentStore = [{"component":Customize, "name":"Customize", "ds": "customizePanelDisplayStyle"  }];

rightPanelContentStore.push({"component":Widgets, "name":"Widgets", "ds": "widgetPanelDisplayStyle" });
leftPanelContentStore.push({"component":Widgets, "name":"Widgets", "ds": "widgetPanelDisplayStyle"  });

rightPanelContentStore.push({"component":Options, "name":"Options", "ds": "optionPanelDisplayStyle" });
leftPanelContentStore.push({"component":Options, "name":"Options", "ds": "optionPanelDisplayStyle"  });




let topMenuFrameContent = false;
let bottomMenuFrameContent = false;
let leftMenuFrameContent = false;
let rightMenuFrameContent = false;

$: switch($globalEditorPreferencesStore.menuLocation){
    case MenuLocations.TOP:
        topMenuFrameContent = true;
        bottomMenuFrameContent = false;
        leftMenuFrameContent = false;
        rightMenuFrameContent = false;
        break;
    case MenuLocations.BOTTOM:
        topMenuFrameContent = false;
        bottomMenuFrameContent = true;
        leftMenuFrameContent = false;
        rightMenuFrameContent = false;
        break;
    case MenuLocations.LEFT:
        topMenuFrameContent = false;
        bottomMenuFrameContent = false;
        leftMenuFrameContent = true;
        rightMenuFrameContent = false;
        break;
    case MenuLocations.RIGHT:
        topMenuFrameContent = false;
        bottomMenuFrameContent = false;
        leftMenuFrameContent = false;
        rightMenuFrameContent = true;
        break;
    default:
        break;
}

function add_css() {
	var style = createElement("style");
	style.id = 'svelte-x2322d-style';
	style.textContent = "#backgroundFrame.svelte-x2322d{background-color:var(--backgroundFrameColor);width:100vw;height:100vh;position:relative;margin:auto;overflow:hidden}#topMenuFrame.svelte-x2322d{position:sticky;width:100vw}#bottomMenuFrame.svelte-x2322d{position:sticky;width:100vw}#leftMenuFrame.svelte-x2322d{height:100vh}#leftPanelFrame.svelte-x2322d{background-color:var(--backgroundColor);height:100vh}#rightMenuFrame.svelte-x2322d{height:100vh}#rightPanelFrame.svelte-x2322d{background-color:var(--backgroundColor);height:100vh}#editor.svelte-x2322d{width:100%;height:auto;max-width:var(--editorWidth);max-height:100vh;margin:auto;overflow:auto !important;background-color:var(--editorBackgroundColor)}#infoLayer.svelte-x2322d{position:fixed;left:20vw;bottom:50px;z-index:99999;width:60vw;max-width:100vw;margin:auto}";
	append(document.head, style);
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.item = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.item = list[i];
	return child_ctx;
}

function create_main_fragment(component, ctx) {
	var script0, script1, link0, link1, text0, div3, text1, div2, text2, text3, div1, div0, slot_content_default = component._slotted.default, text4, text5, text6, text7, div4;

	var if_block0 = (ctx.topMenuFrameContent) && create_if_block_7(component, ctx);

	var if_block1 = (ctx.leftMenuFrameContent) && create_if_block_6(component, ctx);

	var if_block2 = (ctx.$globalLeftPanelContentStore.length > 0) && create_if_block_4(component, ctx);

	var if_block3 = (ctx.$globalRightPanelContentStore.length > 0) && create_if_block_2(component, ctx);

	var if_block4 = (ctx.rightMenuFrameContent) && create_if_block_1(component, ctx);

	var if_block5 = (ctx.bottomMenuFrameContent) && create_if_block(component, ctx);

	var switch_value = ctx.Info;

	function switch_props(ctx) {
		return {
			root: component.root,
			store: component.store
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			script0 = createElement("script");
			script1 = createElement("script");
			link0 = createElement("link");
			link1 = createElement("link");
			text0 = createText("\n\n\n");
			div3 = createElement("div");
			if (if_block0) if_block0.c();
			text1 = createText("\n    ");
			div2 = createElement("div");
			if (if_block1) if_block1.c();
			text2 = createText("\n\n        ");
			if (if_block2) if_block2.c();
			text3 = createText("\n\n        ");
			div1 = createElement("div");
			div0 = createElement("div");
			text4 = createText("\n\n\n        ");
			if (if_block3) if_block3.c();
			text5 = createText("\n\n        ");
			if (if_block4) if_block4.c();
			text6 = createText("\n    ");
			if (if_block5) if_block5.c();
			text7 = createText("\n\n");
			div4 = createElement("div");
			if (switch_instance) switch_instance._fragment.c();
			script0.src = "/js/jquery-3.6.3.min.js";
			script1.src = "/js/all.js";
			link0.rel = "stylesheet";
			link0.href = "/css/all.css";
			link1.rel = "stylesheet";
			link1.href = "/bootstrap-icons/bootstrap-icons.css";
			document.title = "Atom Page Builder";
			div0.id = "editor";
			setStyle(div0, "--editorBackgroundColor", ctx.$globalEditorPreferencesStore.editorTheme.editorBackgroundColor);
			setStyle(div0, "--backgroundColor", ctx.$globalEditorPreferencesStore.editorTheme.backgroundColor);
			setStyle(div0, "--editorWidth", ctx.$globalEditorPreferencesStore.editorData.editorWidth);
			div0.className = "svelte-x2322d";
			div1.id = "editorWrapper";
			div1.className = "w-full";
			div2.id = "middleFrame";
			div2.className = "flex flex-row";
			div3.id = "backgroundFrame";
			div3.className = " svelte-x2322d";
			setStyle(div3, "--backgroundFrameColor", ctx.$globalEditorPreferencesStore.editorTheme.backgroundFrameColor);
			div4.id = "infoLayer";
			div4.className = "flex items-center svelte-x2322d";
		},

		m(target, anchor) {
			append(document.head, script0);
			append(document.head, script1);
			append(document.head, link0);
			append(document.head, link1);
			insert(target, text0, anchor);
			insert(target, div3, anchor);
			if (if_block0) if_block0.m(div3, null);
			append(div3, text1);
			append(div3, div2);
			if (if_block1) if_block1.m(div2, null);
			append(div2, text2);
			if (if_block2) if_block2.m(div2, null);
			append(div2, text3);
			append(div2, div1);
			append(div1, div0);

			if (slot_content_default) {
				append(div0, slot_content_default);
			}

			append(div2, text4);
			if (if_block3) if_block3.m(div2, null);
			append(div2, text5);
			if (if_block4) if_block4.m(div2, null);
			append(div3, text6);
			if (if_block5) if_block5.m(div3, null);
			insert(target, text7, anchor);
			insert(target, div4, anchor);

			if (switch_instance) {
				switch_instance._mount(div4, null);
			}
		},

		p(changed, ctx) {
			if (ctx.topMenuFrameContent) {
				if (if_block0) {
					if_block0.p(changed, ctx);
				} else {
					if_block0 = create_if_block_7(component, ctx);
					if_block0.c();
					if_block0.m(div3, text1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (ctx.leftMenuFrameContent) {
				if (if_block1) {
					if_block1.p(changed, ctx);
				} else {
					if_block1 = create_if_block_6(component, ctx);
					if_block1.c();
					if_block1.m(div2, text2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (ctx.$globalLeftPanelContentStore.length > 0) {
				if (if_block2) {
					if_block2.p(changed, ctx);
				} else {
					if_block2 = create_if_block_4(component, ctx);
					if_block2.c();
					if_block2.m(div2, text3);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (changed.$globalEditorPreferencesStore) {
				setStyle(div0, "--editorBackgroundColor", ctx.$globalEditorPreferencesStore.editorTheme.editorBackgroundColor);
				setStyle(div0, "--backgroundColor", ctx.$globalEditorPreferencesStore.editorTheme.backgroundColor);
				setStyle(div0, "--editorWidth", ctx.$globalEditorPreferencesStore.editorData.editorWidth);
			}

			if (ctx.$globalRightPanelContentStore.length > 0) {
				if (if_block3) {
					if_block3.p(changed, ctx);
				} else {
					if_block3 = create_if_block_2(component, ctx);
					if_block3.c();
					if_block3.m(div2, text5);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (ctx.rightMenuFrameContent) {
				if (if_block4) {
					if_block4.p(changed, ctx);
				} else {
					if_block4 = create_if_block_1(component, ctx);
					if_block4.c();
					if_block4.m(div2, null);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (ctx.bottomMenuFrameContent) {
				if (if_block5) {
					if_block5.p(changed, ctx);
				} else {
					if_block5 = create_if_block(component, ctx);
					if_block5.c();
					if_block5.m(div3, null);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (changed.$globalEditorPreferencesStore) {
				setStyle(div3, "--backgroundFrameColor", ctx.$globalEditorPreferencesStore.editorTheme.backgroundFrameColor);
			}

			if (switch_value !== (switch_value = ctx.Info)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(div4, null);
				} else {
					switch_instance = null;
				}
			}
		},

		d(detach) {
			detachNode(script0);
			detachNode(script1);
			detachNode(link0);
			detachNode(link1);
			if (detach) {
				detachNode(text0);
				detachNode(div3);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();

			if (slot_content_default) {
				reinsertChildren(div0, slot_content_default);
			}

			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (detach) {
				detachNode(text7);
				detachNode(div4);
			}

			if (switch_instance) switch_instance.destroy();
		}
	};
}

// (119:4) {#if topMenuFrameContent}
function create_if_block_7(component, ctx) {
	var div;

	var switch_value = ctx.Menu;

	function switch_props(ctx) {
		return {
			root: component.root,
			store: component.store
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			div = createElement("div");
			if (switch_instance) switch_instance._fragment.c();
			div.id = "topMenuFrame";
			div.className = "fixed top-0 left-0 right-0 svelte-x2322d";
		},

		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				switch_instance._mount(div, null);
			}
		},

		p(changed, ctx) {
			if (switch_value !== (switch_value = ctx.Menu)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(div, null);
				} else {
					switch_instance = null;
				}
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			if (switch_instance) switch_instance.destroy();
		}
	};
}

// (121:8) {#if leftMenuFrameContent}
function create_if_block_6(component, ctx) {
	var div;

	var switch_value = ctx.Menu;

	function switch_props(ctx) {
		return {
			root: component.root,
			store: component.store
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			div = createElement("div");
			if (switch_instance) switch_instance._fragment.c();
			div.id = "leftMenuFrame";
			div.className = " svelte-x2322d";
		},

		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				switch_instance._mount(div, null);
			}
		},

		p(changed, ctx) {
			if (switch_value !== (switch_value = ctx.Menu)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(div, null);
				} else {
					switch_instance = null;
				}
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			if (switch_instance) switch_instance.destroy();
		}
	};
}

// (123:8) {#if $globalLeftPanelContentStore.length > 0}
function create_if_block_4(component, ctx) {
	var div;

	var each_value = ctx.$globalLeftPanelContentStore;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block_1(component, get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = createElement("div");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			div.id = "leftPanelFrame";
			div.className = " svelte-x2322d";
		},

		m(target, anchor) {
			insert(target, div, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},

		p(changed, ctx) {
			if (changed.$globalEditorPreferencesStore || changed.$globalLeftPanelContentStore || changed.PanelDisplayStyles) {
				each_value = ctx.$globalLeftPanelContentStore;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block_1(component, child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			destroyEach(each_blocks, detach);
		}
	};
}

// (125:16) {#if $globalEditorPreferencesStore[item.ds] == PanelDisplayStyles.FIXEDLEFT}
function create_if_block_5(component, ctx) {
	var switch_instance_anchor;

	var switch_value = ctx.item.component;

	function switch_props(ctx) {
		return {
			root: component.root,
			store: component.store
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) switch_instance._fragment.c();
			switch_instance_anchor = createComment();
		},

		m(target, anchor) {
			if (switch_instance) {
				switch_instance._mount(target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
		},

		p(changed, ctx) {
			if (switch_value !== (switch_value = ctx.item.component)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},

		d(detach) {
			if (detach) {
				detachNode(switch_instance_anchor);
			}

			if (switch_instance) switch_instance.destroy(detach);
		}
	};
}

// (124:12) {#each $globalLeftPanelContentStore as item}
function create_each_block_1(component, ctx) {
	var if_block_anchor;

	var if_block = (ctx.$globalEditorPreferencesStore[ctx.item.ds] == ctx.PanelDisplayStyles.FIXEDLEFT) && create_if_block_5(component, ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = createComment();
		},

		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},

		p(changed, ctx) {
			if (ctx.$globalEditorPreferencesStore[ctx.item.ds] == ctx.PanelDisplayStyles.FIXEDLEFT) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block_5(component, ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		d(detach) {
			if (if_block) if_block.d(detach);
			if (detach) {
				detachNode(if_block_anchor);
			}
		}
	};
}

// (143:8) {#if $globalRightPanelContentStore.length > 0}
function create_if_block_2(component, ctx) {
	var div;

	var each_value_1 = ctx.$globalRightPanelContentStore;

	var each_blocks = [];

	for (var i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block(component, get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			div = createElement("div");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			div.id = "rightPanelFrame";
			div.className = " svelte-x2322d";
		},

		m(target, anchor) {
			insert(target, div, anchor);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},

		p(changed, ctx) {
			if (changed.$globalEditorPreferencesStore || changed.$globalRightPanelContentStore || changed.PanelDisplayStyles) {
				each_value_1 = ctx.$globalRightPanelContentStore;

				for (var i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(component, child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value_1.length;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			destroyEach(each_blocks, detach);
		}
	};
}

// (145:16) {#if $globalEditorPreferencesStore[item.ds] == PanelDisplayStyles.FIXEDRIGHT}
function create_if_block_3(component, ctx) {
	var switch_instance_anchor;

	var switch_value = ctx.item.component;

	function switch_props(ctx) {
		return {
			root: component.root,
			store: component.store
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) switch_instance._fragment.c();
			switch_instance_anchor = createComment();
		},

		m(target, anchor) {
			if (switch_instance) {
				switch_instance._mount(target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
		},

		p(changed, ctx) {
			if (switch_value !== (switch_value = ctx.item.component)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},

		d(detach) {
			if (detach) {
				detachNode(switch_instance_anchor);
			}

			if (switch_instance) switch_instance.destroy(detach);
		}
	};
}

// (144:12) {#each $globalRightPanelContentStore as item}
function create_each_block(component, ctx) {
	var if_block_anchor;

	var if_block = (ctx.$globalEditorPreferencesStore[ctx.item.ds] == ctx.PanelDisplayStyles.FIXEDRIGHT) && create_if_block_3(component, ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = createComment();
		},

		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},

		p(changed, ctx) {
			if (ctx.$globalEditorPreferencesStore[ctx.item.ds] == ctx.PanelDisplayStyles.FIXEDRIGHT) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block_3(component, ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		d(detach) {
			if (if_block) if_block.d(detach);
			if (detach) {
				detachNode(if_block_anchor);
			}
		}
	};
}

// (151:8) {#if rightMenuFrameContent}
function create_if_block_1(component, ctx) {
	var div;

	var switch_value = ctx.Menu;

	function switch_props(ctx) {
		return {
			root: component.root,
			store: component.store
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			div = createElement("div");
			if (switch_instance) switch_instance._fragment.c();
			div.id = "rightMenuFrame";
			div.className = " svelte-x2322d";
		},

		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				switch_instance._mount(div, null);
			}
		},

		p(changed, ctx) {
			if (switch_value !== (switch_value = ctx.Menu)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(div, null);
				} else {
					switch_instance = null;
				}
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			if (switch_instance) switch_instance.destroy();
		}
	};
}

// (154:4) {#if bottomMenuFrameContent}
function create_if_block(component, ctx) {
	var div;

	var switch_value = ctx.Menu;

	function switch_props(ctx) {
		return {
			root: component.root,
			store: component.store
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			div = createElement("div");
			if (switch_instance) switch_instance._fragment.c();
			div.id = "bottomMenuFrame";
			div.className = "fixed bottom-0 left-0 right-0 svelte-x2322d";
		},

		m(target, anchor) {
			insert(target, div, anchor);

			if (switch_instance) {
				switch_instance._mount(div, null);
			}
		},

		p(changed, ctx) {
			if (switch_value !== (switch_value = ctx.Menu)) {
				if (switch_instance) {
					switch_instance.destroy();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance._fragment.c();
					switch_instance._mount(div, null);
				} else {
					switch_instance = null;
				}
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div);
			}

			if (switch_instance) switch_instance.destroy();
		}
	};
}

function layout(options) {
	init(this, options);
	this._state = assign(this.store._init(["globalEditorPreferencesStore","globalLeftPanelContentStore","globalRightPanelContentStore"]), options.data);
	this.store._add(this, ["globalEditorPreferencesStore","globalLeftPanelContentStore","globalRightPanelContentStore"]);
	this._intro = true;

	this._handlers.destroy = [removeFromStore];

	this._slotted = options.slots || {};

	if (!document.getElementById("svelte-x2322d-style")) add_css();

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);

		flush(this);
	}
}

assign(layout.prototype, {
 	destroy: destroy,
 	get: get,
 	fire: fire,
 	on: on,
 	set: set,
 	_set: _set,
 	_stage: _stage,
 	_mount: _mount,
 	_differs: _differs
 });

layout.prototype._recompute = noop;

function createElement(name) {
	return document.createElement(name);
}

function append(target, node) {
	target.appendChild(node);
}

function createText(data) {
	return document.createTextNode(data);
}

function setStyle(node, key, value) {
	node.style.setProperty(key, value);
}

function insert(target, node, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function reinsertChildren(parent, target) {
	while (parent.firstChild) target.appendChild(parent.firstChild);
}

function destroyEach(iterations, detach) {
	for (var i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d(detach);
	}
}

function createComment() {
	return document.createComment('');
}

function init(component, options) {
	component._handlers = blankObject();
	component._slots = blankObject();
	component._bind = options._bind;
	component._staged = {};

	component.options = options;
	component.root = options.root || component;
	component.store = options.store || component.root.store;

	if (!options.root) {
		component._beforecreate = [];
		component._oncreate = [];
		component._aftercreate = [];
	}
}

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function removeFromStore() {
	this.store._remove(this);
}

function flush(component) {
	component._lock = true;
	callAll(component._beforecreate);
	callAll(component._oncreate);
	callAll(component._aftercreate);
	component._lock = false;
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = noop;

	this._fragment.d(detach !== false);
	this._fragment = null;
	this._state = {};
}

function get() {
	return this._state;
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		var handler = handlers[i];

		if (!handler.__calling) {
			try {
				handler.__calling = true;
				handler.call(this, data);
			} finally {
				handler.__calling = false;
			}
		}
	}
}

function on(eventName, handler) {
	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	flush(this.root);
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	newState = assign(this._staged, newState);
	this._staged = {};

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		this.fire("state", { changed: changed, current: this._state, previous: oldState });
		this._fragment.p(changed, this._state);
		this.fire("update", { changed: changed, current: this._state, previous: oldState });
	}
}

function _stage(newState) {
	assign(this._staged, newState);
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function noop() {}

function blankObject() {
	return Object.create(null);
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}
export default layout;